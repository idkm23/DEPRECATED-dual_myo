'''
Created on Jan 7, 2016

@author: ymeng
'''

import collections
import numpy as np

SMOOTHING = 0.2

class BuildMDP(object):
    '''
    Build transition matrices and reward matrices
    '''
    def __init__(self, actionsFile, statesFile):
        '''
        Constructor
        '''
        self.actionsFile = actionsFile
        self.statesFile = statesFile
        
    def getTransitions(self):
        
        C3 = collections.defaultdict(int)
        C2 = collections.defaultdict(int)
        self.P = {}
        
        with open(self.actionsFile) as f:
            actions = [x.strip() for x in f]
        #--------------------------------------------------------- print actions
            
        with open(self.statesFile) as f:
            states = [x.strip() for x in f]
        #---------------------------------------------------------- print states
        
        assert len(actions) == len(states)
        for i in range(len(states)):
            #----------------------------------------------------------- print i
            C3[(states[i], actions[i], states[i+1])] += 1
            C2[(states[i], actions[i])] += 1
            if i == len(states)-2: break
        
        for key in C3:
            self.P[key] = (SMOOTHING+C3[key]) / (SMOOTHING*len(C2)+C2[(key[0], key[1])])
        
        self.actions = actions
        self.states = states
    
    def getProb(self, s, a, s_next):
        if (s, a, s_next) in self.P:
            return self.P([s, a, s_next])
        else:
            return SMOOTHING / (SMOOTHING*(len(self.actions) + len(self.states)) + self.P[(s, a)])
        
    def buildP(self):
        """
        Build the transition probability matrices
        """
        T = np.zeros((2, S, S))
        
        
    
                
if __name__ == '__main__':
    actionsFile = './data/emg_labels'
    statesFile = './data/imu_labels'
    builder = BuildMDP(actionsFile, statesFile)
    builder.getTransitions()
    print builder.P
                      